package templates

import (
  "fmt"

  "github.com/seanmorton/hledger-htmx/internal/hledger"
)

func barColor(item hledger.BudgetItem) string {
  if item.Percent() > 50 {
    return "bg-green"
  } else if item.Percent() > 0 {
    return "bg-yellow"
  } else {
    return "bg-red"
  }
}

// TODO configure thresholds
func spendColor(spend float64) string {
  if spend < 3500 {
    return "fg-green"
  } else if spend < 4200 {
    return "fg-yellow"
  } else {
    return "fg-red"
  }
}

func barWidth(item hledger.BudgetItem) string {
  return fmt.Sprintf("w-[%.0f%%]", item.Percent())
}

templ Budget(from, to string, items []hledger.BudgetItem, currCCBal float64) {
  @Params("/budget", "main", "", from, to, false, false)
  <h5>CC Spend: <span class={ spendColor(currCCBal) }>{ money(currCCBal) }</span></h5>
  for _, item := range items {
    <div
      class="budgetRow"
      hx-get={ fmt.Sprintf("/register?from=%s&to=%s&account=%s", from, to, item.Account) }
      hx-on::after-request="this.appendChild(htmx.find('#budgetRegister'));"
      hx-target="#budgetRegister"
      hx-indicator="#loading"
      >
      <h4>{ item.Name }</h4>
      <div class="w-full border">
        <div class={ "budgetBar", barColor(item), barWidth(item) }>{ money(item.Remaining()) }</div>
      </div>
      <span>({ money(item.Spent) } / { money(item.Target) })</span>
    </div>
  }
  <div id="budgetRegister">
  </div>
}
