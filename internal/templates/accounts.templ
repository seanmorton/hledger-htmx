package templates

import (
  "github.com/seanmorton/hledger-htmx/internal/hledger"
)

templ Accounts(from, to string, historical, invert bool, balance hledger.Balance, registerEntries []hledger.RegisterEntry) {
  @Params("/accounts", "main", balance.Account, from, to, historical, invert)
  <h4 style="text-align:center;">{ balance.Account }</h4>
  <h5 style="text-align:center;">{ money(balance.Amount) }</h5>
  <div style="width: 350; height: 350;">
    <canvas id="balanceChart" width="350px" height="350px"></canvas>
  </div>
  @Register(from, to, registerEntries)
  if historical {
    @graph("bar", balance)
  } else {
    @graph("doughnut", balance)
  }
}

script graph(chartType string, balance hledger.Balance) {
  const canvas = htmx.find("#balanceChart");
  const labels = balance.sub_balances.map((b) => b.account.split(":").at(-1));
  const values = balance.sub_balances.map((b) => b.amount);
  //  Color Palette by Paletton.com
  //  http://paletton.com/#uid=74H180kt+lZlOstrKqzzSiaJidt
  const colors = [
   "#64198D",
   "#D4481C",
   "#D4D41C",
   "#149453",

   "#753697",
   "#E36D48",
   "#E3E348",
   "#339F68",

   "#500D75",
   "#AF320B",
   "#AFAF0B",
   "#087B40",
  ];
  const chart = new Chart(canvas, {
    type: chartType,
    data: {
      labels: labels,
      datasets: [{
        label: "",
        backgroundColor: colors,
        data: values
      }]
    },
    options: {
      legend: {
        display: (chartType == "doughnut" ? true : false),
        position: "bottom",
        labels: {
          fontSize: 16,
          fontColor: "#dcdcdc",
          fontFamily: "-apple-system, BlinkMacSystemFont, 'Avenir Next', Avenir, 'Nimbus Sans L', Roboto, 'Noto Sans', 'Segoe UI', Arial, Helvetica, 'Helvetica Neue', sans-serif",
        }
      },
    }
  });
  canvas.onclick = function(evt) {
    const currentAccount = htmx.find("#currentAccount").value;
    let activePoints = chart.getElementsAtEvent(evt);
    let account;
    if (activePoints[0]) {
      var chartData = activePoints[0]['_chart'].config.data;
      var idx = activePoints[0]['_index'];
      account = currentAccount + ":" + chartData.labels[idx];
    } else {
      accountParts = currentAccount.split(":");
      if (accountParts.length == 1 || accountParts[1] == "") {
        return;
      }
      account = currentAccount.split(":").slice(0,-1).join(":");
    }
    currentAccountElem = htmx.find("#currentAccount");
    currentAccountElem.value = account;
    currentAccountElem.dispatchEvent(new Event("change"));
  };
}
