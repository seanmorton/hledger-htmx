package templates

import (
"github.com/seanmorton/hledger-htmx/internal/hledger"
)

templ Expenses(currentAccount, from, to string, balanceEntries []hledger.BalanceEntry, registerEntries []hledger.RegisterEntry) {
  <form id="dateSelect" hx-get="/expenses" hx-target="#expenses" hx-trigger="change from:#dateSelect>input">
    <label>From</label>
    <input type="date" name="from" value={ from } />
    <label>To</label>
    <input type="date" name="to" value={ to } />
    <input id="currentAccount" name="account" type="hidden" value={ currentAccount } />
  </form>

  <div style="width: 600px; height: 600px;">
    <canvas id="balanceChart" width="600px" height="600px"></canvas>
  </div>
  <table>
    <tbody>
      for _, entry := range registerEntries {
        <tr>
        <td>{ entry.Date }</td>
        <td>{ entry.Description }</td>
        <td>{ entry.Amount }</td>
        <td>{ entry.Total }</td>
        </tr>
      }
    </tbody>
  </table>

  @graph(currentAccount, balanceEntries)
}

script graph(currentAccount string, entries []hledger.BalanceEntry) {
  const canvas = htmx.find("#balanceChart");
  const labels = entries.map((e) => e.account);
  const values = entries.map((e) => e.amount);
  const colors = [
    "#3366CC", "#DC3912", "#FF9900", "#109618", "#990099", "#3B3EAC", "#0099C6",
    "#DD4477", "#66AA00", "#B82E2E", "#316395", "#994499", "#22AA99", "#AAAA11",
    "#6633CC", "#E67300", "#8B0707", "#329262", "#5574A6", "#651067"
  ];
  const chart = new Chart(canvas, {
    type: "doughnut",
    data: {
      labels: labels,
      datasets: [{
        backgroundColor: colors,
        data: values
      }]
    },
    options: {
      title: {
        display: true,
        text: "Balances for " + currentAccount
      },
      legend: {
        display: true
      },
    }
  });
  canvas.onclick = function(evt) {
    var account
    var activePoints = chart.getElementsAtEvent(evt);
    if (activePoints[0]) {
      var chartData = activePoints[0]['_chart'].config.data;
      var idx = activePoints[0]['_index'];
      account = chartData.labels[idx];
    } else {
      account = htmx.find("#currentAccount").value;
      accountParts = account.split(":")
      if (accountParts.length == 1 || accountParts[1] == "") {
        return;
      }
      account = account.split(":").slice(0,-1).join(":");
    }
    currentAccount = htmx.find("#currentAccount");
    currentAccount.value = account;
    currentAccount.dispatchEvent(new Event("change"));
  };
}

